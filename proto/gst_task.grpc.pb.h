// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gst_task.proto
#ifndef GRPC_gst_5ftask_2eproto__INCLUDED
#define GRPC_gst_5ftask_2eproto__INCLUDED

#include "gst_task.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace gst_task {

class GstTask final {
 public:
  static constexpr char const* service_full_name() {
    return "gst_task.GstTask";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status StartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::gst_task::StartReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::StartReply>> AsyncStartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::StartReply>>(AsyncStartTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::StartReply>> PrepareAsyncStartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::StartReply>>(PrepareAsyncStartTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status StopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::gst_task::RunReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::RunReply>> AsyncStopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::RunReply>>(AsyncStopTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::RunReply>> PrepareAsyncStopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::RunReply>>(PrepareAsyncStopTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status RunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::gst_task::RunReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::RunReply>> AsyncRunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::RunReply>>(AsyncRunTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::RunReply>> PrepareAsyncRunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::RunReply>>(PrepareAsyncRunTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::gst_task::TaskReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::TaskReply>> AsyncGetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::TaskReply>>(AsyncGetTaskStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::TaskReply>> PrepareAsyncGetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::TaskReply>>(PrepareAsyncGetTaskStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status SetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::gst_task::TaskReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::TaskReply>> AsyncSetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::TaskReply>>(AsyncSetTaskPropRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::TaskReply>> PrepareAsyncSetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::TaskReply>>(PrepareAsyncSetTaskPropRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void StartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest* request, ::gst_task::StartReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest* request, ::gst_task::StartReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest* request, ::gst_task::TaskReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest* request, ::gst_task::TaskReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest* request, ::gst_task::TaskReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest* request, ::gst_task::TaskReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::StartReply>* AsyncStartTaskRaw(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::StartReply>* PrepareAsyncStartTaskRaw(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::RunReply>* AsyncStopTaskRaw(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::RunReply>* PrepareAsyncStopTaskRaw(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::RunReply>* AsyncRunTaskRaw(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::RunReply>* PrepareAsyncRunTaskRaw(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::TaskReply>* AsyncGetTaskStatusRaw(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::TaskReply>* PrepareAsyncGetTaskStatusRaw(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::TaskReply>* AsyncSetTaskPropRaw(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gst_task::TaskReply>* PrepareAsyncSetTaskPropRaw(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status StartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::gst_task::StartReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::StartReply>> AsyncStartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::StartReply>>(AsyncStartTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::StartReply>> PrepareAsyncStartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::StartReply>>(PrepareAsyncStartTaskRaw(context, request, cq));
    }
    ::grpc::Status StopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::gst_task::RunReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>> AsyncStopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>>(AsyncStopTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>> PrepareAsyncStopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>>(PrepareAsyncStopTaskRaw(context, request, cq));
    }
    ::grpc::Status RunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::gst_task::RunReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>> AsyncRunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>>(AsyncRunTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>> PrepareAsyncRunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>>(PrepareAsyncRunTaskRaw(context, request, cq));
    }
    ::grpc::Status GetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::gst_task::TaskReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>> AsyncGetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>>(AsyncGetTaskStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>> PrepareAsyncGetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>>(PrepareAsyncGetTaskStatusRaw(context, request, cq));
    }
    ::grpc::Status SetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::gst_task::TaskReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>> AsyncSetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>>(AsyncSetTaskPropRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>> PrepareAsyncSetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>>(PrepareAsyncSetTaskPropRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest* request, ::gst_task::StartReply* response, std::function<void(::grpc::Status)>) override;
      void StartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest* request, ::gst_task::StartReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response, std::function<void(::grpc::Status)>) override;
      void StopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response, std::function<void(::grpc::Status)>) override;
      void RunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest* request, ::gst_task::TaskReply* response, std::function<void(::grpc::Status)>) override;
      void GetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest* request, ::gst_task::TaskReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest* request, ::gst_task::TaskReply* response, std::function<void(::grpc::Status)>) override;
      void SetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest* request, ::gst_task::TaskReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gst_task::StartReply>* AsyncStartTaskRaw(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gst_task::StartReply>* PrepareAsyncStartTaskRaw(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>* AsyncStopTaskRaw(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>* PrepareAsyncStopTaskRaw(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>* AsyncRunTaskRaw(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>* PrepareAsyncRunTaskRaw(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>* AsyncGetTaskStatusRaw(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>* PrepareAsyncGetTaskStatusRaw(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>* AsyncSetTaskPropRaw(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>* PrepareAsyncSetTaskPropRaw(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartTask_;
    const ::grpc::internal::RpcMethod rpcmethod_StopTask_;
    const ::grpc::internal::RpcMethod rpcmethod_RunTask_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTaskStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTaskProp_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StartTask(::grpc::ServerContext* context, const ::gst_task::StartRequest* request, ::gst_task::StartReply* response);
    virtual ::grpc::Status StopTask(::grpc::ServerContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response);
    virtual ::grpc::Status RunTask(::grpc::ServerContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response);
    virtual ::grpc::Status GetTaskStatus(::grpc::ServerContext* context, const ::gst_task::TaskRequest* request, ::gst_task::TaskReply* response);
    virtual ::grpc::Status SetTaskProp(::grpc::ServerContext* context, const ::gst_task::SetTaskPropRequest* request, ::gst_task::TaskReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartTask() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTask(::grpc::ServerContext* /*context*/, const ::gst_task::StartRequest* /*request*/, ::gst_task::StartReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartTask(::grpc::ServerContext* context, ::gst_task::StartRequest* request, ::grpc::ServerAsyncResponseWriter< ::gst_task::StartReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopTask() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTask(::grpc::ServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopTask(::grpc::ServerContext* context, ::gst_task::RunRequest* request, ::grpc::ServerAsyncResponseWriter< ::gst_task::RunReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunTask() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RunTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTask(::grpc::ServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunTask(::grpc::ServerContext* context, ::gst_task::RunRequest* request, ::grpc::ServerAsyncResponseWriter< ::gst_task::RunReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTaskStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTaskStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTaskStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskStatus(::grpc::ServerContext* /*context*/, const ::gst_task::TaskRequest* /*request*/, ::gst_task::TaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTaskStatus(::grpc::ServerContext* context, ::gst_task::TaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::gst_task::TaskReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTaskProp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTaskProp() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetTaskProp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTaskProp(::grpc::ServerContext* /*context*/, const ::gst_task::SetTaskPropRequest* /*request*/, ::gst_task::TaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTaskProp(::grpc::ServerContext* context, ::gst_task::SetTaskPropRequest* request, ::grpc::ServerAsyncResponseWriter< ::gst_task::TaskReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartTask<WithAsyncMethod_StopTask<WithAsyncMethod_RunTask<WithAsyncMethod_GetTaskStatus<WithAsyncMethod_SetTaskProp<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StartTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartTask() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gst_task::StartRequest, ::gst_task::StartReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gst_task::StartRequest* request, ::gst_task::StartReply* response) { return this->StartTask(context, request, response); }));}
    void SetMessageAllocatorFor_StartTask(
        ::grpc::MessageAllocator< ::gst_task::StartRequest, ::gst_task::StartReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gst_task::StartRequest, ::gst_task::StartReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTask(::grpc::ServerContext* /*context*/, const ::gst_task::StartRequest* /*request*/, ::gst_task::StartReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartTask(
      ::grpc::CallbackServerContext* /*context*/, const ::gst_task::StartRequest* /*request*/, ::gst_task::StartReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopTask() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gst_task::RunRequest, ::gst_task::RunReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response) { return this->StopTask(context, request, response); }));}
    void SetMessageAllocatorFor_StopTask(
        ::grpc::MessageAllocator< ::gst_task::RunRequest, ::gst_task::RunReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gst_task::RunRequest, ::gst_task::RunReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTask(::grpc::ServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopTask(
      ::grpc::CallbackServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RunTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RunTask() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::gst_task::RunRequest, ::gst_task::RunReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response) { return this->RunTask(context, request, response); }));}
    void SetMessageAllocatorFor_RunTask(
        ::grpc::MessageAllocator< ::gst_task::RunRequest, ::gst_task::RunReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gst_task::RunRequest, ::gst_task::RunReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RunTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTask(::grpc::ServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RunTask(
      ::grpc::CallbackServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTaskStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTaskStatus() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::gst_task::TaskRequest, ::gst_task::TaskReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gst_task::TaskRequest* request, ::gst_task::TaskReply* response) { return this->GetTaskStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetTaskStatus(
        ::grpc::MessageAllocator< ::gst_task::TaskRequest, ::gst_task::TaskReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gst_task::TaskRequest, ::gst_task::TaskReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTaskStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskStatus(::grpc::ServerContext* /*context*/, const ::gst_task::TaskRequest* /*request*/, ::gst_task::TaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTaskStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::gst_task::TaskRequest* /*request*/, ::gst_task::TaskReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetTaskProp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetTaskProp() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::gst_task::SetTaskPropRequest, ::gst_task::TaskReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gst_task::SetTaskPropRequest* request, ::gst_task::TaskReply* response) { return this->SetTaskProp(context, request, response); }));}
    void SetMessageAllocatorFor_SetTaskProp(
        ::grpc::MessageAllocator< ::gst_task::SetTaskPropRequest, ::gst_task::TaskReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gst_task::SetTaskPropRequest, ::gst_task::TaskReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetTaskProp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTaskProp(::grpc::ServerContext* /*context*/, const ::gst_task::SetTaskPropRequest* /*request*/, ::gst_task::TaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTaskProp(
      ::grpc::CallbackServerContext* /*context*/, const ::gst_task::SetTaskPropRequest* /*request*/, ::gst_task::TaskReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StartTask<WithCallbackMethod_StopTask<WithCallbackMethod_RunTask<WithCallbackMethod_GetTaskStatus<WithCallbackMethod_SetTaskProp<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartTask() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTask(::grpc::ServerContext* /*context*/, const ::gst_task::StartRequest* /*request*/, ::gst_task::StartReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopTask() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTask(::grpc::ServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunTask() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RunTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTask(::grpc::ServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTaskStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTaskStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTaskStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskStatus(::grpc::ServerContext* /*context*/, const ::gst_task::TaskRequest* /*request*/, ::gst_task::TaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTaskProp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTaskProp() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetTaskProp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTaskProp(::grpc::ServerContext* /*context*/, const ::gst_task::SetTaskPropRequest* /*request*/, ::gst_task::TaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartTask() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTask(::grpc::ServerContext* /*context*/, const ::gst_task::StartRequest* /*request*/, ::gst_task::StartReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopTask() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StopTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTask(::grpc::ServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunTask() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RunTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTask(::grpc::ServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTaskStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTaskStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetTaskStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskStatus(::grpc::ServerContext* /*context*/, const ::gst_task::TaskRequest* /*request*/, ::gst_task::TaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTaskStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTaskProp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTaskProp() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetTaskProp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTaskProp(::grpc::ServerContext* /*context*/, const ::gst_task::SetTaskPropRequest* /*request*/, ::gst_task::TaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTaskProp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartTask() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTask(::grpc::ServerContext* /*context*/, const ::gst_task::StartRequest* /*request*/, ::gst_task::StartReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopTask() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTask(::grpc::ServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RunTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RunTask() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RunTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_RunTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTask(::grpc::ServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RunTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTaskStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTaskStatus() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTaskStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTaskStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskStatus(::grpc::ServerContext* /*context*/, const ::gst_task::TaskRequest* /*request*/, ::gst_task::TaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTaskStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetTaskProp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetTaskProp() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTaskProp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetTaskProp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTaskProp(::grpc::ServerContext* /*context*/, const ::gst_task::SetTaskPropRequest* /*request*/, ::gst_task::TaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTaskProp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartTask() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gst_task::StartRequest, ::gst_task::StartReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gst_task::StartRequest, ::gst_task::StartReply>* streamer) {
                       return this->StreamedStartTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartTask(::grpc::ServerContext* /*context*/, const ::gst_task::StartRequest* /*request*/, ::gst_task::StartReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gst_task::StartRequest,::gst_task::StartReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopTask() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gst_task::RunRequest, ::gst_task::RunReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gst_task::RunRequest, ::gst_task::RunReply>* streamer) {
                       return this->StreamedStopTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopTask(::grpc::ServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gst_task::RunRequest,::gst_task::RunReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RunTask() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gst_task::RunRequest, ::gst_task::RunReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gst_task::RunRequest, ::gst_task::RunReply>* streamer) {
                       return this->StreamedRunTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RunTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunTask(::grpc::ServerContext* /*context*/, const ::gst_task::RunRequest* /*request*/, ::gst_task::RunReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gst_task::RunRequest,::gst_task::RunReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTaskStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTaskStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gst_task::TaskRequest, ::gst_task::TaskReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gst_task::TaskRequest, ::gst_task::TaskReply>* streamer) {
                       return this->StreamedGetTaskStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTaskStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTaskStatus(::grpc::ServerContext* /*context*/, const ::gst_task::TaskRequest* /*request*/, ::gst_task::TaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTaskStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gst_task::TaskRequest,::gst_task::TaskReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTaskProp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTaskProp() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gst_task::SetTaskPropRequest, ::gst_task::TaskReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gst_task::SetTaskPropRequest, ::gst_task::TaskReply>* streamer) {
                       return this->StreamedSetTaskProp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTaskProp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTaskProp(::grpc::ServerContext* /*context*/, const ::gst_task::SetTaskPropRequest* /*request*/, ::gst_task::TaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTaskProp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gst_task::SetTaskPropRequest,::gst_task::TaskReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartTask<WithStreamedUnaryMethod_StopTask<WithStreamedUnaryMethod_RunTask<WithStreamedUnaryMethod_GetTaskStatus<WithStreamedUnaryMethod_SetTaskProp<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartTask<WithStreamedUnaryMethod_StopTask<WithStreamedUnaryMethod_RunTask<WithStreamedUnaryMethod_GetTaskStatus<WithStreamedUnaryMethod_SetTaskProp<Service > > > > > StreamedService;
};

}  // namespace gst_task


#endif  // GRPC_gst_5ftask_2eproto__INCLUDED
