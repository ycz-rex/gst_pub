// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gst_task.proto

#include "gst_task.pb.h"
#include "gst_task.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace gst_task {

static const char* GstTask_method_names[] = {
  "/gst_task.GstTask/StartTask",
  "/gst_task.GstTask/StopTask",
  "/gst_task.GstTask/RunTask",
  "/gst_task.GstTask/GetTaskStatus",
  "/gst_task.GstTask/SetTaskProp",
};

std::unique_ptr< GstTask::Stub> GstTask::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GstTask::Stub> stub(new GstTask::Stub(channel, options));
  return stub;
}

GstTask::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StartTask_(GstTask_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopTask_(GstTask_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunTask_(GstTask_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTaskStatus_(GstTask_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTaskProp_(GstTask_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GstTask::Stub::StartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::gst_task::StartReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gst_task::StartRequest, ::gst_task::StartReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartTask_, context, request, response);
}

void GstTask::Stub::async::StartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest* request, ::gst_task::StartReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gst_task::StartRequest, ::gst_task::StartReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTask_, context, request, response, std::move(f));
}

void GstTask::Stub::async::StartTask(::grpc::ClientContext* context, const ::gst_task::StartRequest* request, ::gst_task::StartReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gst_task::StartReply>* GstTask::Stub::PrepareAsyncStartTaskRaw(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gst_task::StartReply, ::gst_task::StartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gst_task::StartReply>* GstTask::Stub::AsyncStartTaskRaw(::grpc::ClientContext* context, const ::gst_task::StartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GstTask::Stub::StopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::gst_task::RunReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gst_task::RunRequest, ::gst_task::RunReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopTask_, context, request, response);
}

void GstTask::Stub::async::StopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gst_task::RunRequest, ::gst_task::RunReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopTask_, context, request, response, std::move(f));
}

void GstTask::Stub::async::StopTask(::grpc::ClientContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>* GstTask::Stub::PrepareAsyncStopTaskRaw(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gst_task::RunReply, ::gst_task::RunRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>* GstTask::Stub::AsyncStopTaskRaw(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GstTask::Stub::RunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::gst_task::RunReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gst_task::RunRequest, ::gst_task::RunReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RunTask_, context, request, response);
}

void GstTask::Stub::async::RunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gst_task::RunRequest, ::gst_task::RunReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunTask_, context, request, response, std::move(f));
}

void GstTask::Stub::async::RunTask(::grpc::ClientContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>* GstTask::Stub::PrepareAsyncRunTaskRaw(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gst_task::RunReply, ::gst_task::RunRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RunTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gst_task::RunReply>* GstTask::Stub::AsyncRunTaskRaw(::grpc::ClientContext* context, const ::gst_task::RunRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GstTask::Stub::GetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::gst_task::TaskReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gst_task::TaskRequest, ::gst_task::TaskReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTaskStatus_, context, request, response);
}

void GstTask::Stub::async::GetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest* request, ::gst_task::TaskReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gst_task::TaskRequest, ::gst_task::TaskReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTaskStatus_, context, request, response, std::move(f));
}

void GstTask::Stub::async::GetTaskStatus(::grpc::ClientContext* context, const ::gst_task::TaskRequest* request, ::gst_task::TaskReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTaskStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>* GstTask::Stub::PrepareAsyncGetTaskStatusRaw(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gst_task::TaskReply, ::gst_task::TaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTaskStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>* GstTask::Stub::AsyncGetTaskStatusRaw(::grpc::ClientContext* context, const ::gst_task::TaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTaskStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GstTask::Stub::SetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::gst_task::TaskReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gst_task::SetTaskPropRequest, ::gst_task::TaskReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTaskProp_, context, request, response);
}

void GstTask::Stub::async::SetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest* request, ::gst_task::TaskReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gst_task::SetTaskPropRequest, ::gst_task::TaskReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTaskProp_, context, request, response, std::move(f));
}

void GstTask::Stub::async::SetTaskProp(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest* request, ::gst_task::TaskReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTaskProp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>* GstTask::Stub::PrepareAsyncSetTaskPropRaw(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gst_task::TaskReply, ::gst_task::SetTaskPropRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTaskProp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gst_task::TaskReply>* GstTask::Stub::AsyncSetTaskPropRaw(::grpc::ClientContext* context, const ::gst_task::SetTaskPropRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTaskPropRaw(context, request, cq);
  result->StartCall();
  return result;
}

GstTask::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GstTask_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GstTask::Service, ::gst_task::StartRequest, ::gst_task::StartReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GstTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gst_task::StartRequest* req,
             ::gst_task::StartReply* resp) {
               return service->StartTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GstTask_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GstTask::Service, ::gst_task::RunRequest, ::gst_task::RunReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GstTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gst_task::RunRequest* req,
             ::gst_task::RunReply* resp) {
               return service->StopTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GstTask_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GstTask::Service, ::gst_task::RunRequest, ::gst_task::RunReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GstTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gst_task::RunRequest* req,
             ::gst_task::RunReply* resp) {
               return service->RunTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GstTask_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GstTask::Service, ::gst_task::TaskRequest, ::gst_task::TaskReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GstTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gst_task::TaskRequest* req,
             ::gst_task::TaskReply* resp) {
               return service->GetTaskStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GstTask_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GstTask::Service, ::gst_task::SetTaskPropRequest, ::gst_task::TaskReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GstTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gst_task::SetTaskPropRequest* req,
             ::gst_task::TaskReply* resp) {
               return service->SetTaskProp(ctx, req, resp);
             }, this)));
}

GstTask::Service::~Service() {
}

::grpc::Status GstTask::Service::StartTask(::grpc::ServerContext* context, const ::gst_task::StartRequest* request, ::gst_task::StartReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GstTask::Service::StopTask(::grpc::ServerContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GstTask::Service::RunTask(::grpc::ServerContext* context, const ::gst_task::RunRequest* request, ::gst_task::RunReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GstTask::Service::GetTaskStatus(::grpc::ServerContext* context, const ::gst_task::TaskRequest* request, ::gst_task::TaskReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GstTask::Service::SetTaskProp(::grpc::ServerContext* context, const ::gst_task::SetTaskPropRequest* request, ::gst_task::TaskReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gst_task

